/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ImgParameter : TBase
{
  private string _materialName;
  private string _floor;
  private string _lotNum;
  private int _sn;
  private int _slice;
  private int _width;
  private int _height;

  public string MaterialName
  {
    get
    {
      return _materialName;
    }
    set
    {
      __isset.materialName = true;
      this._materialName = value;
    }
  }

  public string Floor
  {
    get
    {
      return _floor;
    }
    set
    {
      __isset.floor = true;
      this._floor = value;
    }
  }

  public string LotNum
  {
    get
    {
      return _lotNum;
    }
    set
    {
      __isset.lotNum = true;
      this._lotNum = value;
    }
  }

  public int Sn
  {
    get
    {
      return _sn;
    }
    set
    {
      __isset.sn = true;
      this._sn = value;
    }
  }

  public int Slice
  {
    get
    {
      return _slice;
    }
    set
    {
      __isset.slice = true;
      this._slice = value;
    }
  }

  public int Width
  {
    get
    {
      return _width;
    }
    set
    {
      __isset.width = true;
      this._width = value;
    }
  }

  public int Height
  {
    get
    {
      return _height;
    }
    set
    {
      __isset.height = true;
      this._height = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool materialName;
    public bool floor;
    public bool lotNum;
    public bool sn;
    public bool slice;
    public bool width;
    public bool height;
  }

  public ImgParameter() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              MaterialName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Floor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              LotNum = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Sn = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Slice = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Width = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Height = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ImgParameter");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MaterialName != null && __isset.materialName) {
        field.Name = "materialName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MaterialName);
        oprot.WriteFieldEnd();
      }
      if (Floor != null && __isset.floor) {
        field.Name = "floor";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Floor);
        oprot.WriteFieldEnd();
      }
      if (LotNum != null && __isset.lotNum) {
        field.Name = "lotNum";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LotNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.sn) {
        field.Name = "sn";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Sn);
        oprot.WriteFieldEnd();
      }
      if (__isset.slice) {
        field.Name = "slice";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Slice);
        oprot.WriteFieldEnd();
      }
      if (__isset.width) {
        field.Name = "width";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Width);
        oprot.WriteFieldEnd();
      }
      if (__isset.height) {
        field.Name = "height";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Height);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ImgParameter(");
    bool __first = true;
    if (MaterialName != null && __isset.materialName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MaterialName: ");
      __sb.Append(MaterialName);
    }
    if (Floor != null && __isset.floor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Floor: ");
      __sb.Append(Floor);
    }
    if (LotNum != null && __isset.lotNum) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LotNum: ");
      __sb.Append(LotNum);
    }
    if (__isset.sn) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Sn: ");
      __sb.Append(Sn);
    }
    if (__isset.slice) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Slice: ");
      __sb.Append(Slice);
    }
    if (__isset.width) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Width: ");
      __sb.Append(Width);
    }
    if (__isset.height) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Height: ");
      __sb.Append(Height);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

